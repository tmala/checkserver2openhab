/**
 * Get server-status and reports to an item at openHAB
 */
importScripts = require('./importscripts.js').importScripts;
importScripts('./settings.ns');
importScripts('./myLog.ns');
importScripts('./myTime.ns');

let XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
const NAME_LENGTH = 16;

setCurrentLogLevel(LOGLEVEL_DEBUG);

if (isInfo()) {
    console.log(myTime_ts() + " Starting CheckServer2openHAB");
}

const DELAY_BETWEEN_CALLS = 5*1000; // 5 seconds

let serverStatusMessage = '';

serverStatusMessage = 'Updating serverstatus ' + myTime_ts();
sendCommand(OPENHAB_ITEM_ServerStatus, serverStatusMessage);

// Run Every Hour after first run if parameter 'forever' is present
let runForEver = false;
process.argv.forEach(function (val) {
    if ('forever' === val) {
        runForEver = true;
    }
});

setTimeout(() => {
    runUpdate();
    if (runForEver) {
        setInterval(() => {
            runUpdate();
        }, 60 * 60 * 1000);
    }
}, 1000);

function runUpdate() {
    const os = require('os');
    const ip = require('ip');
    const bytes = require('bytes');
    // First some Basic Info about this server
    serverStatusMessage = '';
    serverStatusMessage += '\n' + addPad('Hostname') + os.hostname();
    serverStatusMessage += '\n' + addPad('IP-Address') + ip.address();
    serverStatusMessage += '\n' + addPad('OS') + os.type() +' ' + os.platform() + ' ' + os.arch() + ' ' + os.release();
    const upTime = myTime_seconds2json(os.uptime);
    serverStatusMessage += '\n' + addPad('UpTime') + upTime.days + ' days, ' + myTime_fix2digit(upTime.hours) + ':' + myTime_fix2digit(upTime.minutes) + ':' + myTime_fix2digit(upTime.seconds);
    serverStatusMessage += '\n' + addPad('Load') + formatLoadAvg(os.loadavg().toString());
    serverStatusMessage += '\n' + addPad('Memory') + bytes.format(os.totalmem()) + ',  ' + bytes.format(os.freemem()) + ' free';
    // Check some local running processes
    if (S1_NAME && S1_NAME.length>0) { serverStatusMessage += '\n' + addPad(S1_NAME) + checkProcess(S1_PIDFILE, S1_PROCESS); }
    if (S2_NAME && S2_NAME.length>0) { serverStatusMessage += '\n' + addPad(S2_NAME) + checkProcess(S2_PIDFILE, S2_PROCESS); }
    if (S3_NAME && S3_NAME.length>0) { serverStatusMessage += '\n' + addPad(S3_NAME) + checkProcess(S3_PIDFILE, S3_PROCESS); }

    // Send the data to openHAB
    setTimeout(
        function() {
            const tmpMsg = addPad('LastRun') + myTime_ts() + serverStatusMessage;
            sendCommand(OPENHAB_ITEM_ServerStatus, tmpMsg);
            if (isInfo()) {
                console.log(myTime_ts() + ' openHAB item: ' + OPENHAB_ITEM_ServerStatus + ' updated');
            }
            },
        DELAY_BETWEEN_CALLS);
}

/**
 * Format a string which is a list of numbers to fewer decimals
 *  "0.09765,1.2345,2.4589" => "0.09, 1.23, 2.45"
 *  CaveEat: Could not get number.toFixed(2) to work...
 *
 * @param loadAvgStr
 * @returns {string}
 */
function formatLoadAvg(loadAvgStr) {
    let ret = '';
    let sep = '';
    loadAvgStr.split(',').forEach((val) => {
        let valStr = '' + val.toString();
        if (valStr.length > 4 && valStr.indexOf('.')===1 ) {
            valStr = valStr.substr(0,4);
        }
        ret += sep + valStr;
        sep = ', ';
    });
    return ret;
}

function addPad(s) {
    let ret = '';
    ret += s;
    ret += '.'.repeat(NAME_LENGTH - s.length);
    ret += ': ';
    return ret;
}

/**
 * Checks that the process with PID given in the pidFile is running
 * Returns a String telling the status of the process
 *
 * @param pidFileName
 * @param processName
 */
function checkProcess(pidFileName, processName) {
    // Handle FR24FEED specially
    if (pidFileName === 'fr24feed') {
        return checkFR24Feed(processName);
    }

    let fs = require('fs');
    let myPid = '';
    if (fs.existsSync(pidFileName)) {
        myPid = fs.readFileSync(pidFileName, 'utf8');
        if (!myPid || myPid.trim().length <= 1) {
            return 'No such PID-file found';
        }
        myPid = myPid.trim();
    }

    const childProcess = require('child_process');
    let myCmd = 'ps -ef | grep "' + processName + '"';
    if (myPid && myPid.length > 0) {
        myCmd += ' | grep ' + myPid;
    }

    myCmd += ' | grep -v grep | awk \'{print "pid: "$2" runTime: "$7}\'';

    if (isDebug()) {
        console.log('Getting PID: ' + myPid + ' from pidfile: ' + pidFileName);
        console.log('Checking result from command: ' + myCmd);
    }
    let stdout;
    try {
        stdout = childProcess.execSync(myCmd);
        if (stdout && stdout.length>0) {
            let strStdOut = stdout.toString();
            return 'OK ' + strStdOut.trim();
        } else {
            return 'No such process is running';
        }
    } catch (error) {
        if (isError() ) {
            console.log(myTime_ts() + ' ERROR ??? ' + error.stdout);
        }
        return 'No such process is running';
    }
}

function checkFR24Feed(myCmd) {
    const childProcess = require('child_process');
    if (isDebug()) {
        console.log('Checking result from command: ' + myCmd);
    }
    let stdout;
    try {
        stdout = childProcess.execSync(myCmd);
        if (stdout && stdout.length>0) {
            if (isTrace()) {
                console.log('Buffer stdout:');
                console.log('=======================================================');
                console.log(stdout);
                console.log('=======================================================');
            }
            let stdOutStr = stdout.toString();
            if (isDebug()) {
                console.log(stdOutStr);
            }
            let retString = ' Running OK \n';
            retString += stdOutStr;
            let strSearch = 'FR24 ';
            let strReplace = '.' + '.'.repeat(NAME_LENGTH - 1) + ': FR24 ';
            console.log('Trying to replace "' + strSearch + '" with "' + strReplace + '"');
            retString = retString.split(strSearch).join(strReplace);
            strSearch = 'Receiver: connected (';
            strReplace = '.' + '.'.repeat(NAME_LENGTH - 1) + ': Receiver: connected (';
            console.log('Trying to replace "' + strSearch + '" with "' + strReplace + '"');
            retString = retString.split(strSearch).join(strReplace);
            return retString;
        } else {
            return ' Unable to check using ' + myCmd;
        }
    } catch (ex) {
        if (isError() ) {
            console.log(myTime_ts() + ' ERROR ??? ' + myCmd);
        }
        return 'No output from ' + myCmd;
    }
}




/**
 * Sends a command to update an openHAB Item
 *
 * @param itemId
 * @param command
 */
function sendCommand(itemId, command) {
    let xhr_sendCommand = new XMLHttpRequest();
    xhr_sendCommand.withCredentials = true;
    xhr_sendCommand.addEventListener("readystatechange", function () {
        if (this.readyState === this.DONE) {
            if (this.status === 200) {
                let res = this.responseText;
                if (isTrace()) {
                    console.log(myTime_ts() + " " + this.status +  " OK => Response: ", res);
                }
            } else {
                let res = this.responseText;
                if (isError()) {
                    console.log(myTime_ts() + " " + this.status +  " " + this.statusText + " => Response: ", JSON.stringify(res, null, 2) );
                }
            }
        }
    });
    xhr_sendCommand.open('POST', OPENHAB_URL + itemId);
    xhr_sendCommand.setRequestHeader("accept", "application/json");
    xhr_sendCommand.send(command);
}
